<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Spring on yexca&#39;Blog</title>
        <link>https://blog.yexca.net/categories/spring/</link>
        <description>Recent content in Spring on yexca&#39;Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>yexca</copyright>
        <lastBuildDate>Wed, 29 Jan 2025 23:38:51 +0900</lastBuildDate><atom:link href="https://blog.yexca.net/categories/spring/feed.xml" rel="self" type="application/rss+xml" /><item>
        <title>Elasticsearch 入门</title>
        <link>https://blog.yexca.net/archives/226/</link>
        <pubDate>Wed, 29 Jan 2025 23:38:51 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/226/</guid>
        <description>&lt;p&gt;Elasticsearch 是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中快速找到需要的内容。结合 kibana、Logstash、Beats，也就是 elastic stack (ELK)。被广泛应用在日志数据分析、实时监控等领域&lt;/p&gt;</description>
        </item>
        <item>
        <title>Spring 自动配置与起步依赖</title>
        <link>https://blog.yexca.net/archives/223/</link>
        <pubDate>Thu, 23 Jan 2025 15:06:36 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/223/</guid>
        <description>&lt;h2 id=&#34;配置&#34;&gt;配置
&lt;/h2&gt;&lt;p&gt;yaml、yml、properties 文件都可以配置，还可以通过 Java 系统属性和命令行参数&lt;/p&gt;
&lt;p&gt;优先级：命令行参数 &amp;gt; Java 系统属性 &amp;gt; properties &amp;gt; yml &amp;gt; yaml&lt;/p&gt;
&lt;p&gt;命令行使用，需要首先运行 Maven 的打包指令，然后在命令行运行&lt;/p&gt;</description>
        </item>
        <item>
        <title>Spring 事务管理</title>
        <link>https://blog.yexca.net/archives/222/</link>
        <pubDate>Wed, 22 Jan 2025 13:30:38 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/222/</guid>
        <description>&lt;h2 id=&#34;事务&#34;&gt;事务
&lt;/h2&gt;&lt;p&gt;事务是一组操作的集合，它是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败&lt;/p&gt;
&lt;p&gt;操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开启事务 (一组操作开始前，开启事务)：start transaction / begin&lt;/li&gt;
&lt;li&gt;提交事务 (这组操作全部成功后，提交事务)：commit&lt;/li&gt;
&lt;li&gt;回滚事务 (中间任何一个操作出现异常，回滚事务)：rollback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设删除部门后要继续删除该部门员工&lt;/p&gt;</description>
        </item>
        <item>
        <title>Spring AOP(面向切面编程)</title>
        <link>https://blog.yexca.net/archives/221/</link>
        <pubDate>Tue, 21 Jan 2025 16:05:57 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/221/</guid>
        <description>&lt;p&gt;Aspect Oriented Programming (面向切面编程、面向方面编程) 是面向特定方法编程&lt;/p&gt;
&lt;p&gt;动态代理是面向切面编程最主流的实现。而 SpringAOP 是 Spring 框架的高级技术，旨在管理 bean 对象的过程中，主要通过底层的动态代理机制，对特定的方法进行编程&lt;/p&gt;</description>
        </item>
        <item>
        <title>JWT 登录校验</title>
        <link>https://blog.yexca.net/archives/218/</link>
        <pubDate>Thu, 16 Jan 2025 23:06:20 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/218/</guid>
        <description>&lt;h2 id=&#34;会话技术&#34;&gt;会话技术
&lt;/h2&gt;&lt;p&gt;会话：用户打开浏览器，访问 web 服务器的资源，会话建立，直到有一方断开连接，会话结束。在一次会话中可以包含多次请求和响应&lt;/p&gt;
&lt;p&gt;会话跟踪：一种维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便在同一次会话的多次请求间共享数据&lt;/p&gt;</description>
        </item>
        <item>
        <title>SpringAMQP</title>
        <link>https://blog.yexca.net/archives/217/</link>
        <pubDate>Wed, 15 Jan 2025 17:03:32 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/217/</guid>
        <description>&lt;h2 id=&#34;初识-mq&#34;&gt;初识 MQ
&lt;/h2&gt;&lt;h3 id=&#34;同步调用&#34;&gt;同步调用
&lt;/h3&gt;&lt;p&gt;微服务间基于 Feign 的调用属于同步方式，存在一些问题&lt;/p&gt;
&lt;p&gt;例如要开发一个支付服务，需要加入订单服务和仓储服务的代码，后期若要加入短信服务、积分服务等都需要修改支付代码，违反了

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/93#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99&#34; 

&gt;
开放-封闭原则
&lt;/a&gt;
 ，并且在请求返回前无法做其他事情也会造成性能的浪费&lt;/p&gt;</description>
        </item>
        <item>
        <title>Gateway 服务网关</title>
        <link>https://blog.yexca.net/archives/171/</link>
        <pubDate>Sun, 05 May 2024 00:54:52 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/171/</guid>
        <description>&lt;p&gt;Gateway  是所有微服务的统一入口，有以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身份认证和权限检验：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截&lt;/li&gt;
&lt;li&gt;请求路由、负载均衡：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡&lt;/li&gt;
&lt;li&gt;请求限流：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SpringCloud 的网关实现有两种&lt;/p&gt;</description>
        </item>
        <item>
        <title>Feign 远程调用</title>
        <link>https://blog.yexca.net/archives/170/</link>
        <pubDate>Fri, 03 May 2024 23:11:52 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/170/</guid>
        <description>&lt;p&gt;Feign是一个声明式的 Http 客户端，Github：

&lt;a class=&#34;link&#34; href=&#34;https://github.com/OpenFeign/feign&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
https://github.com/OpenFeign/feign
&lt;/a&gt;
 &lt;/p&gt;
&lt;h2 id=&#34;简单使用&#34;&gt;简单使用
&lt;/h2&gt;&lt;p&gt;引入依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-openfeign&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在启动类添加注解开启 Feign 的功能&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableFeignClients&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@SpringBootApplication&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编写 Feign 客户端&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@FeignClient&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;userService&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserClient&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/user/{id}&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    User &lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;@PathVariable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;) Long id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;替换 RestTemplate&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OrderService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; OrderMapper orderMapper;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// @Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// private RestTemplate restTemplate;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; UserClient userClient;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Order &lt;span style=&#34;color:#a6e22e&#34;&gt;queryOrderById&lt;/span&gt;(Long orderId) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1.查询订单&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Order order &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; orderMapper.&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;(orderId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 2.查询用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// String url = &amp;#34;http://localhost:8081/user/&amp;#34; + order.getUserId();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//        String url = &amp;#34;http://userService/user/&amp;#34; + order.getUserId();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//        User user = restTemplate.getForObject(url, User.class);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Feign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        User user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;findById&lt;/span&gt;(order.&lt;span style=&#34;color:#a6e22e&#34;&gt;getUserId&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 3.封装用户信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        order.&lt;span style=&#34;color:#a6e22e&#34;&gt;setUser&lt;/span&gt;(user);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 4.返回&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; order;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;自定义配置&#34;&gt;自定义配置
&lt;/h2&gt;&lt;p&gt;Feign运行自定义配置来覆盖默认配置，可以修改的配置如下：&lt;/p&gt;</description>
        </item>
        <item>
        <title>Nacos 注册中心</title>
        <link>https://blog.yexca.net/archives/169/</link>
        <pubDate>Thu, 02 May 2024 22:36:17 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/169/</guid>
        <description>&lt;p&gt;需先安装软件，官网：

&lt;a class=&#34;link&#34; href=&#34;https://nacos.io/zh-cn/&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
https://nacos.io/zh-cn/
&lt;/a&gt;
 &lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;conf/application.properties&lt;/code&gt; 文件中可以更改端口，默认为 8848&lt;/p&gt;
&lt;h2 id=&#34;注册服务&#34;&gt;注册服务
&lt;/h2&gt;&lt;p&gt;父工程中添加管理依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-alibaba-dependencies&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.6.RELEASE&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;pom&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;import&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注释掉 Eureka 的依赖，并添加 Nacos 客户端的依赖&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alibaba.cloud&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改 application.yml，添加 Nacos 地址，注释 Eureka 地址&lt;/p&gt;</description>
        </item>
        <item>
        <title>Ribbon 负载均衡</title>
        <link>https://blog.yexca.net/archives/168/</link>
        <pubDate>Sun, 28 Apr 2024 15:50:15 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/168/</guid>
        <description>&lt;p&gt;消费者发起请求会被 Ribbon 拦截，Ribbon 从 Eureka 拉取提供者列表，Eureka 返回提供者列表，Ribbon 根据 IRule 选择服务器发起请求&lt;/p&gt;
&lt;p&gt;详细拦截：请求-&amp;gt;DynamicServerListLoadBalancer (获取url中的服务id,userService)-&amp;gt;DynamicServerListLoadBalancer-&amp;gt;Eureka-&amp;gt;DynamicServerListLoadBalancer-&amp;gt;IRule-&amp;gt;DynamicServerListLoadBalancer -&amp;gt;发起请求&lt;/p&gt;</description>
        </item>
        <item>
        <title>注册中心 - Eureka</title>
        <link>https://blog.yexca.net/archives/161/</link>
        <pubDate>Thu, 29 Feb 2024 16:53:15 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/161/</guid>
        <description>&lt;p&gt;引入注册中心之前先引入提供者与消费者概念&lt;/p&gt;
&lt;h2 id=&#34;提供者与消费者&#34;&gt;提供者与消费者
&lt;/h2&gt;&lt;p&gt;服务提供者：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）&lt;/p&gt;
&lt;p&gt;服务消费者：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hi SpringCloud</title>
        <link>https://blog.yexca.net/archives/158/</link>
        <pubDate>Sun, 25 Feb 2024 17:56:54 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/158/</guid>
        <description>&lt;h2 id=&#34;服务架构&#34;&gt;服务架构
&lt;/h2&gt;&lt;h3 id=&#34;单体架构&#34;&gt;单体架构
&lt;/h3&gt;&lt;p&gt;将业务的所有功能集中在一个项目中开发，打包一个包部署&lt;/p&gt;
&lt;p&gt;优点：架构简单、扩展性差、部署成本低，适合小型项目&lt;/p&gt;
&lt;p&gt;缺点：耦合度高&lt;/p&gt;
&lt;h3 id=&#34;分布式架构&#34;&gt;分布式架构
&lt;/h3&gt;&lt;p&gt;根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务&lt;/p&gt;</description>
        </item>
        <item>
        <title>微信登录后端</title>
        <link>https://blog.yexca.net/archives/152/</link>
        <pubDate>Sat, 10 Feb 2024 18:09:17 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/152/</guid>
        <description>&lt;p&gt;Happy Lunar Year!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;流程：

&lt;a class=&#34;link&#34; href=&#34;https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html
&lt;/a&gt;
 &lt;/p&gt;
&lt;p&gt;前端获取授权码，向 

&lt;a class=&#34;link&#34; href=&#34;https://api.weixin.qq.com/sns/jscode2session&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
https://api.weixin.qq.com/sns/jscode2session
&lt;/a&gt;
  发起请求，获取 session_key 和 openid&lt;/p&gt;
&lt;p&gt;微信请求接口：

&lt;a class=&#34;link&#34; href=&#34;https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-login/code2Session.html&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-login/code2Session.html
&lt;/a&gt;
 &lt;/p&gt;
&lt;h2 id=&#34;分析设计&#34;&gt;分析设计
&lt;/h2&gt;&lt;h3 id=&#34;接口设计&#34;&gt;接口设计
&lt;/h3&gt;&lt;p&gt;请求路径：/user/user/login&lt;/p&gt;
&lt;p&gt;请求方式：POST&lt;/p&gt;
&lt;p&gt;请求参数：code String (微信用户授权码)&lt;/p&gt;</description>
        </item>
        <item>
        <title>三层架构与分层解耦</title>
        <link>https://blog.yexca.net/archives/147/</link>
        <pubDate>Fri, 19 Jan 2024 10:37:15 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/147/</guid>
        <description>&lt;h2 id=&#34;案例引入&#34;&gt;案例引入
&lt;/h2&gt;&lt;p&gt;获取员工数据，返回统一响应结果，在页面渲染展示&lt;/p&gt;
&lt;p&gt;首先需要引入 dom4j 依赖，用于解析 xml 文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.dom4j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;dom4j&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.1.3&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;引入解析 XML 的工具类 XMLParserUtils、对应实体类 Emp、XML 文件 emp.xml&lt;/p&gt;</description>
        </item>
        <item>
        <title>Spring 请求响应</title>
        <link>https://blog.yexca.net/archives/144/</link>
        <pubDate>Sun, 14 Jan 2024 16:47:28 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/144/</guid>
        <description>&lt;p&gt;浏览器发送请求会先经过 DispatcherServlet 转给各 *Controller 程序进行处理，处理完成后返回给 DispatcherServlet 处理结果，然后再返回浏览器&lt;/p&gt;
&lt;p&gt;DispatcherServlet 被称为核心控制器或前端控制器&lt;/p&gt;
&lt;p&gt;对于浏览器请求数据，会被封装到 HttpServletRequest 对象，响应数据被封装到 HttpServletResponse&lt;/p&gt;</description>
        </item>
        <item>
        <title>JavaWeb 入门</title>
        <link>https://blog.yexca.net/archives/142/</link>
        <pubDate>Wed, 10 Jan 2024 17:53:18 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/142/</guid>
        <description>&lt;h2 id=&#34;springboot-入门例子&#34;&gt;SpringBoot 入门例子
&lt;/h2&gt;&lt;p&gt;需求：使用 SpringBoot 开发一个 web 应用，浏览器发起 /hello 后，返回字符串 “Hello Spring”&lt;/p&gt;
&lt;p&gt;首先需要创建 SpringBoot 工程，并勾选 web 开发相关依赖&lt;/p&gt;
&lt;p&gt;然后创建控制类，路径在 &lt;code&gt;*Application.java&lt;/code&gt; 同级创建文件 &lt;code&gt;Controller/HelloController.java&lt;/code&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
