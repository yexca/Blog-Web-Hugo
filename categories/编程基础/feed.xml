<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>编程基础 on yexca&#39;Blog</title>
        <link>https://blog.yexca.net/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
        <description>Recent content in 编程基础 on yexca&#39;Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>yexca</copyright>
        <lastBuildDate>Tue, 28 Jan 2025 21:30:18 +0900</lastBuildDate><atom:link href="https://blog.yexca.net/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/feed.xml" rel="self" type="application/rss+xml" /><item>
        <title>Python pyinstaller 打包</title>
        <link>https://blog.yexca.net/archives/213/</link>
        <pubDate>Tue, 07 Jan 2025 17:26:09 +0900</pubDate>
        
        <guid>https://blog.yexca.net/archives/213/</guid>
        <description>&lt;p&gt;Python 打包是根据当前系统环境的，Windows 下是打包出 exe 可执行程序，Linux 下打包出 ELF 格式的二进制文件，不支持跨平台打包&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;安装
&lt;/h2&gt;&lt;p&gt;通过 pip 安装&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install pyinstaller
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;打包为单文件&#34;&gt;打包为单文件
&lt;/h2&gt;&lt;p&gt;使用参数 &lt;code&gt;--onefile&lt;/code&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 后端入门</title>
        <link>https://blog.yexca.net/archives/208/</link>
        <pubDate>Sun, 22 Dec 2024 22:07:15 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/208/</guid>
        <description>&lt;p&gt;简单 (非技术框架) 实现的 Go 后端&lt;/p&gt;
&lt;p&gt;~~众所周知，~~后端的开发一般是面向接口的开发，也可以说是 CRUD 工程师，本文章将使用 Go 描述从数据库读出数据，然后返回 JSON 数据&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 通道</title>
        <link>https://blog.yexca.net/archives/207/</link>
        <pubDate>Sat, 21 Dec 2024 14:52:55 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/207/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 本文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Go 程 (goroutine) 可以通过 channel 进行传递数据，引用类型 channel 可用于多个 goroutine 通讯，其内部实现了同步，确保并发安全&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang go 程</title>
        <link>https://blog.yexca.net/archives/206/</link>
        <pubDate>Tue, 17 Dec 2024 21:16:31 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/206/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 本文&lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;进程 -&amp;gt; 线程 -&amp;gt; 协程&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 结构体标签</title>
        <link>https://blog.yexca.net/archives/205/</link>
        <pubDate>Wed, 11 Dec 2024 18:31:18 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/205/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 本文&lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;通过结构体标签可以描述该类在某包的作用&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 反射</title>
        <link>https://blog.yexca.net/archives/204/</link>
        <pubDate>Tue, 03 Dec 2024 14:07:18 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/204/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 本文&lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;反射指一类应用，它们能够自描述和自控制&lt;/p&gt;</description>
        </item>
        <item>
        <title>形式语言与自动机 - 基本概念</title>
        <link>https://blog.yexca.net/archives/197/</link>
        <pubDate>Tue, 19 Nov 2024 22:18:42 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/197/</guid>
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;Sometimes it&amp;rsquo;s the people who no one imagines anything of who do the things that no one can imagine&lt;/p&gt;
&lt;p&gt;最近从

&lt;a class=&#34;link&#34; href=&#34;https://www.bilibili.com/video/BV1QMmZYzET2/&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
毕导视频
&lt;/a&gt;
 弹幕中得知关于图灵的记录片 The Imitation Game(模拟游戏)，顺便看了一下，对于片中出现的该句话感触颇深，以此当作形式语言与自动机文章的开篇题引&lt;/p&gt;</description>
        </item>
        <item>
        <title>算法 n-皇后问题 (回溯法)</title>
        <link>https://blog.yexca.net/archives/176/</link>
        <pubDate>Sun, 28 Jul 2024 14:26:26 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/176/</guid>
        <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述
&lt;/h2&gt;&lt;p&gt;n-皇后问题是在 n 行 n 列的棋盘上放置 n 个皇后，使得皇后彼此之间不受攻击，其规则是任意两个皇后不在同一行、同一列和相同的对角线上 (也就算国际象棋的皇后移动范围)&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 面向对象</title>
        <link>https://blog.yexca.net/archives/162/</link>
        <pubDate>Fri, 01 Mar 2024 15:35:38 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/162/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 本文&lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;通过使用结构体构建类与对象的概念&lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 切片</title>
        <link>https://blog.yexca.net/archives/160/</link>
        <pubDate>Tue, 27 Feb 2024 20:00:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/160/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang 系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 本文&lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 函数</title>
        <link>https://blog.yexca.net/archives/156/</link>
        <pubDate>Thu, 22 Feb 2024 04:47:28 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/156/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang 系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 本文&lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>GoLang 变量与常量</title>
        <link>https://blog.yexca.net/archives/155/</link>
        <pubDate>Tue, 20 Feb 2024 06:41:18 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/155/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang 系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/154&#34; 

&gt;
https://blog.yexca.net/archives/154
&lt;/a&gt;
 &lt;br&gt;
GoLang (var and const) 变量与常量: 本文&lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>Hello GoLang</title>
        <link>https://blog.yexca.net/archives/154/</link>
        <pubDate>Mon, 19 Feb 2024 07:58:37 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/154/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Golang 系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hello GoLang: 本文&lt;br&gt;
GoLang (var and const) 变量与常量: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/155&#34; 

&gt;
https://blog.yexca.net/archives/155
&lt;/a&gt;
 &lt;br&gt;
GoLang (func) 函数: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/156&#34; 

&gt;
https://blog.yexca.net/archives/156
&lt;/a&gt;
 &lt;br&gt;
GoLang (slice and map) 切片: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/160&#34; 

&gt;
https://blog.yexca.net/archives/160
&lt;/a&gt;
 &lt;br&gt;
GoLang (OOP) 面向对象: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/162&#34; 

&gt;
https://blog.yexca.net/archives/162
&lt;/a&gt;
 &lt;br&gt;
GoLang (reflect) 反射: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/204&#34; 

&gt;
https://blog.yexca.net/archives/204
&lt;/a&gt;
 &lt;br&gt;
GoLang (struct tag) 结构体标签: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/205&#34; 

&gt;
https://blog.yexca.net/archives/205
&lt;/a&gt;
 &lt;br&gt;
GoLang (goroutine) go 程: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/206&#34; 

&gt;
https://blog.yexca.net/archives/206
&lt;/a&gt;
 &lt;br&gt;
GoLang (channel) 通道: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/207&#34; 

&gt;
https://blog.yexca.net/archives/207
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>算法 钢条切割问题 (动态规划 分治)</title>
        <link>https://blog.yexca.net/archives/110/</link>
        <pubDate>Sat, 27 May 2023 19:37:08 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/110/</guid>
        <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述
&lt;/h2&gt;&lt;p&gt;某公司购买长钢条，将其切割后进行出售。切割钢条的成本可以忽略不计，钢条的长度为英寸。已知价格表 $p$ ，其中 $p_{i}(i=1,2,\cdots,m)$ 表示长度为 $i$ 英寸的钢条的价格。现要求解使销售收益最大的切割方案&lt;/p&gt;</description>
        </item>
        <item>
        <title>算法 假币问题 (分治)</title>
        <link>https://blog.yexca.net/archives/109/</link>
        <pubDate>Thu, 18 May 2023 20:17:35 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/109/</guid>
        <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述
&lt;/h2&gt;&lt;p&gt;有 $n$ 枚硬币，其中有一枚是假币，已知假币的重量较轻。现只有一个天平，要求用尽量少的比较次数找出这枚假币&lt;/p&gt;
&lt;h2 id=&#34;问题分析&#34;&gt;问题分析
&lt;/h2&gt;&lt;p&gt;将 $n$ 枚硬币分成相等的两部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当 $n$ 为偶数时，将前后两部分，即 $1\cdots\frac{n}{2}$ 和 $\frac{n}{2}+1\cdots n$ 放在天平的两端，较轻的一端里有假币，继续在较轻的这部分硬币中用同样的方法找出假币&lt;/li&gt;
&lt;li&gt;当 $n$ 为奇数时，将前后两部分，即 $1\cdots\frac{n-1}{2}$ 和 $\frac{n+1}{2}+1\cdots n$ 放在天平的两端，较轻的一端里有假币，继续在较轻的这部分硬币中用同样的方法找出假币；若两端重量相等，则中间的硬币，即第 $\frac{n+1}{2}$ 枚硬币是假币&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;c-代码&#34;&gt;C 代码
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// coins:重量数组   first,last:数组第一个与最后一个下标
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;coins, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; first, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; coins[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(coins, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;第 %d 个是假币&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,tmp&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;coins, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; first, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; last){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; firstSum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; lastSum&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 只剩两枚硬币
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(first &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; last &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(coins[first] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; coins[last])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; first;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; last;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 偶数枚硬币
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;first; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            firstSum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; coins[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;last&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            lastSum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; coins[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(firstSum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lastSum){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(coins, first, first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(coins, first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, last);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{  &lt;span style=&#34;color:#75715e&#34;&gt;// 奇数枚硬币
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;first; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            firstSum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; coins[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;last&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            lastSum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; coins[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(firstSum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; lastSum){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(coins, first, first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(firstSum &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; lastSum){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getCounterfeitCoin&lt;/span&gt;(coins, first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, last);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; first&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;(last&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;first)&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        <item>
        <title>算法 电路布线问题 (动态规划)</title>
        <link>https://blog.yexca.net/archives/106/</link>
        <pubDate>Tue, 16 May 2023 17:53:31 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/106/</guid>
        <description>&lt;h2 id=&#34;问题描述&#34;&gt;问题描述
&lt;/h2&gt;&lt;p&gt;在一块电路板的上下两端分别有 n 个接线柱。根据电路设计，用 $(i, \pi(i))$ 表示将上端接线柱 i 与下端接线柱 $\pi(i)$ 相连，称其为该电路板上的第 i 条连线&lt;/p&gt;
&lt;p&gt;下图所示的 $\pi(i)$ 排列为 ${8, 7, 4, 2, 5, 1, 9, 3, 10, 6}$ 对于任何 $1 \le i &amp;lt; j \le n $ ，第 i 条连线和第 j 条连线相交的充要条件是 $\pi(i)&amp;gt;\pi(j)$&lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习七 数据库的控制功能</title>
        <link>https://blog.yexca.net/archives/92/</link>
        <pubDate>Sun, 12 Feb 2023 08:15:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/92/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/86&#34; 

&gt;
https://blog.yexca.net/archives/86
&lt;/a&gt;
 &lt;br&gt;
数据库学习二 关系模型: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/87&#34; 

&gt;
https://blog.yexca.net/archives/87
&lt;/a&gt;
 &lt;br&gt;
数据库学习三 SQL 语言: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/88&#34; 

&gt;
https://blog.yexca.net/archives/88
&lt;/a&gt;
 &lt;br&gt;
数据库学习四 关系数据库理论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/89&#34; 

&gt;
https://blog.yexca.net/archives/89
&lt;/a&gt;
 &lt;br&gt;
数据库学习五 范式: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/90&#34; 

&gt;
https://blog.yexca.net/archives/90
&lt;/a&gt;
 &lt;br&gt;
数据库学习六 数据库设计: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/91&#34; 

&gt;
https://blog.yexca.net/archives/91
&lt;/a&gt;
 &lt;br&gt;
数据库学习七 数据库的控制功能: 本文&lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习六 数据库设计</title>
        <link>https://blog.yexca.net/archives/91/</link>
        <pubDate>Sat, 11 Feb 2023 08:15:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/91/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/86&#34; 

&gt;
https://blog.yexca.net/archives/86
&lt;/a&gt;
 &lt;br&gt;
数据库学习二 关系模型: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/87&#34; 

&gt;
https://blog.yexca.net/archives/87
&lt;/a&gt;
 &lt;br&gt;
数据库学习三 SQL 语言: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/88&#34; 

&gt;
https://blog.yexca.net/archives/88
&lt;/a&gt;
 &lt;br&gt;
数据库学习四 关系数据库理论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/89&#34; 

&gt;
https://blog.yexca.net/archives/89
&lt;/a&gt;
 &lt;br&gt;
数据库学习五 范式: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/90&#34; 

&gt;
https://blog.yexca.net/archives/90
&lt;/a&gt;
 &lt;br&gt;
数据库学习六 数据库设计: 本文&lt;br&gt;
数据库学习七 数据库的控制功能: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/92&#34; 

&gt;
https://blog.yexca.net/archives/92
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习五 范式</title>
        <link>https://blog.yexca.net/archives/90/</link>
        <pubDate>Fri, 10 Feb 2023 08:13:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/90/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/86&#34; 

&gt;
https://blog.yexca.net/archives/86
&lt;/a&gt;
 &lt;br&gt;
数据库学习二 关系模型: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/87&#34; 

&gt;
https://blog.yexca.net/archives/87
&lt;/a&gt;
 &lt;br&gt;
数据库学习三 SQL 语言: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/88&#34; 

&gt;
https://blog.yexca.net/archives/88
&lt;/a&gt;
 &lt;br&gt;
数据库学习四 关系数据库理论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/89&#34; 

&gt;
https://blog.yexca.net/archives/89
&lt;/a&gt;
 &lt;br&gt;
数据库学习五 范式: 本文&lt;br&gt;
数据库学习六 数据库设计: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/91&#34; 

&gt;
https://blog.yexca.net/archives/91
&lt;/a&gt;
 &lt;br&gt;
数据库学习七 数据库的控制功能: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/92&#34; 

&gt;
https://blog.yexca.net/archives/92
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习四 关系数据库理论</title>
        <link>https://blog.yexca.net/archives/89/</link>
        <pubDate>Thu, 09 Feb 2023 08:10:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/89/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/86&#34; 

&gt;
https://blog.yexca.net/archives/86
&lt;/a&gt;
 &lt;br&gt;
数据库学习二 关系模型: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/87&#34; 

&gt;
https://blog.yexca.net/archives/87
&lt;/a&gt;
 &lt;br&gt;
数据库学习三 SQL 语言: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/88&#34; 

&gt;
https://blog.yexca.net/archives/88
&lt;/a&gt;
 &lt;br&gt;
数据库学习四 关系数据库理论: 本文&lt;br&gt;
数据库学习五 范式: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/90&#34; 

&gt;
https://blog.yexca.net/archives/90
&lt;/a&gt;
 &lt;br&gt;
数据库学习六 数据库设计: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/91&#34; 

&gt;
https://blog.yexca.net/archives/91
&lt;/a&gt;
 &lt;br&gt;
数据库学习七 数据库的控制功能: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/92&#34; 

&gt;
https://blog.yexca.net/archives/92
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习三 SQL 语言</title>
        <link>https://blog.yexca.net/archives/88/</link>
        <pubDate>Wed, 08 Feb 2023 08:00:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/88/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/86&#34; 

&gt;
https://blog.yexca.net/archives/86
&lt;/a&gt;
 &lt;br&gt;
数据库学习二 关系模型: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/87&#34; 

&gt;
https://blog.yexca.net/archives/87
&lt;/a&gt;
 &lt;br&gt;
数据库学习三 SQL 语言: 本文&lt;br&gt;
数据库学习四 关系数据库理论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/89&#34; 

&gt;
https://blog.yexca.net/archives/89
&lt;/a&gt;
 &lt;br&gt;
数据库学习五 范式: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/90&#34; 

&gt;
https://blog.yexca.net/archives/90
&lt;/a&gt;
 &lt;br&gt;
数据库学习六 数据库设计: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/91&#34; 

&gt;
https://blog.yexca.net/archives/91
&lt;/a&gt;
 &lt;br&gt;
数据库学习七 数据库的控制功能: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/92&#34; 

&gt;
https://blog.yexca.net/archives/92
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习二 关系模型</title>
        <link>https://blog.yexca.net/archives/87/</link>
        <pubDate>Tue, 07 Feb 2023 06:00:00 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/87/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/86&#34; 

&gt;
https://blog.yexca.net/archives/86
&lt;/a&gt;
 &lt;br&gt;
数据库学习二 关系模型: 本文&lt;br&gt;
数据库学习三 SQL 语言: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/88&#34; 

&gt;
https://blog.yexca.net/archives/88
&lt;/a&gt;
 &lt;br&gt;
数据库学习四 关系数据库理论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/89&#34; 

&gt;
https://blog.yexca.net/archives/89
&lt;/a&gt;
 &lt;br&gt;
数据库学习五 范式: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/90&#34; 

&gt;
https://blog.yexca.net/archives/90
&lt;/a&gt;
 &lt;br&gt;
数据库学习六 数据库设计: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/91&#34; 

&gt;
https://blog.yexca.net/archives/91
&lt;/a&gt;
 &lt;br&gt;
数据库学习七 数据库的控制功能: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/92&#34; 

&gt;
https://blog.yexca.net/archives/92
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>数据库学习一 数据库导论</title>
        <link>https://blog.yexca.net/archives/86/</link>
        <pubDate>Mon, 06 Feb 2023 19:57:35 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/86/</guid>
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;之前数据库的写的很不好看，重新复习编写一下 (虽然这个也挺乱就是了)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Series&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库学习一 数据库导论: 本文&lt;br&gt;
数据库学习二 关系模型: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/87&#34; 

&gt;
https://blog.yexca.net/archives/87
&lt;/a&gt;
 &lt;br&gt;
数据库学习三 SQL 语言: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/88&#34; 

&gt;
https://blog.yexca.net/archives/88
&lt;/a&gt;
 &lt;br&gt;
数据库学习四 关系数据库理论: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/89&#34; 

&gt;
https://blog.yexca.net/archives/89
&lt;/a&gt;
 &lt;br&gt;
数据库学习五 范式: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/90&#34; 

&gt;
https://blog.yexca.net/archives/90
&lt;/a&gt;
 &lt;br&gt;
数据库学习六 数据库设计: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/91&#34; 

&gt;
https://blog.yexca.net/archives/91
&lt;/a&gt;
 &lt;br&gt;
数据库学习七 数据库的控制功能: 

&lt;a class=&#34;link&#34; href=&#34;https://blog.yexca.net/archives/92&#34; 

&gt;
https://blog.yexca.net/archives/92
&lt;/a&gt;
 &lt;/p&gt;</description>
        </item>
        <item>
        <title>HTTP 学习</title>
        <link>https://blog.yexca.net/archives/64/</link>
        <pubDate>Mon, 05 Sep 2022 16:03:36 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/64/</guid>
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;这是在我阅读了肖佳老师的书《HTTP抓包实战》后对HTTP相关内容的总结，主要还是报文相关(记录：阅读此书与写出此文章耗时5天)&lt;/p&gt;
&lt;h2 id=&#34;http协议报文的结构&#34;&gt;HTTP协议报文的结构
&lt;/h2&gt;&lt;p&gt;HTTP报文分2个：一个是HTTP请求报文，一个是HTTP响应报文&lt;/p&gt;</description>
        </item>
        <item>
        <title>《图解HTTP》读后总结及浅谈</title>
        <link>https://blog.yexca.net/archives/29/</link>
        <pubDate>Wed, 16 Mar 2022 23:56:48 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/29/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;该文章由 

&lt;a class=&#34;link&#34; href=&#34;https://blog.hiyoung.xyz/&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
Hiyoung
&lt;/a&gt;
  编写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第一章了解web及网络基础&#34;&gt;第一章：了解Web及网络基础
&lt;/h2&gt;&lt;h3 id=&#34;11简介&#34;&gt;1.1简介
&lt;/h3&gt;&lt;p&gt;为理解HTTP应事先了解一下TCP/IP协议族，我们通常使用的网络（包括互联网）是在TCP/IP协议族的基础上运作，而HTTP属于它内部的一个子集。在互联网上的设备需要相互通信双方就必须要遵从相同的规则，我们把这些规则称为协议。（TCP/IP是对互联网相关的各类协议族的一个总称包括但不限于：PPPoE、HTTP、TCP、IP、UDP、IEEE 802.3…）&lt;/p&gt;</description>
        </item>
        <item>
        <title>数据结构 栈代码</title>
        <link>https://blog.yexca.net/archives/17/</link>
        <pubDate>Sun, 21 Nov 2021 22:19:04 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/17/</guid>
        <description>&lt;h2 id=&#34;顺序栈-数组实现&#34;&gt;顺序栈 (数组实现)
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 元素 elem 进栈，a 为数组，top 值为当前栈的栈顶位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; elem)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a[&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;top]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;elem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; top;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 数据元素出栈
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; a,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (top&lt;span style=&#34;color:#f92672&#34;&gt;==-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;空栈&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;弹栈元素：%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,a[top]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; top;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(a, top, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(a, top, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(a, top, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(a, top, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(a, top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(a, top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(a, top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(a, top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pop&lt;/span&gt;(a, top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果：&lt;/p&gt;</description>
        </item>
        <item>
        <title>数据结构 顺序表代码</title>
        <link>https://blog.yexca.net/archives/16/</link>
        <pubDate>Sat, 20 Nov 2021 23:01:47 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/16/</guid>
        <description>&lt;h2 id=&#34;代码&#34;&gt;代码
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt; // malloc()、exit()&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define Size 5  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 对 Size 进行宏定义，表示顺序表申请空间的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Table
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; head; &lt;span style=&#34;color:#75715e&#34;&gt;// 声明了一个名为head的长度不确定的数组，也叫“动态数组”
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length; &lt;span style=&#34;color:#75715e&#34;&gt;// 记录当前顺序表的长度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size;   &lt;span style=&#34;color:#75715e&#34;&gt;// 记录顺序表分配的存储容量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}table;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 初始化函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;table &lt;span style=&#34;color:#a6e22e&#34;&gt;initTable&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    table t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t.head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(Size &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));  &lt;span style=&#34;color:#75715e&#34;&gt;// 构造一个空的顺序表，动态申请存储空间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;t.head)    &lt;span style=&#34;color:#75715e&#34;&gt;// 如果申请失败，作出提示并直接退出程序
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;初始化失败&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t.length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;   &lt;span style=&#34;color:#75715e&#34;&gt;// 空表的长度初始化为 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    t.size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Size;  &lt;span style=&#34;color:#75715e&#34;&gt;// 空表的初始存储空间为 Size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 插入函数，其中，elem 为插入的元素，add 为插入到顺序表的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;table &lt;span style=&#34;color:#a6e22e&#34;&gt;addTable&lt;/span&gt;(table t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; elem, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; add)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 判断插入本身是否存在问题（如果插入元素位置比整张表的长度 +1 还大 (如果相等，是尾随的情况)，或者插入的位置本身不存在，程序作为提示并自动退出)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (add &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t.length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;插入位置有问题&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (t.length &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; t.size) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t.head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#a6e22e&#34;&gt;realloc&lt;/span&gt;(t.head, (t.size &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;t.head) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;存储分配失败&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t.size &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 插入操作，需要将从插入位置开始的后续元素，逐个后移
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t.length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t.head[i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t.head[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 后移完成后，直接将所需插入元素，添加到顺序表的相应位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    t.head[add &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 由于添加了元素，所以长度 +1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    t.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 删除函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;table &lt;span style=&#34;color:#a6e22e&#34;&gt;delTable&lt;/span&gt;(table t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; add) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (add &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; t.length &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;被删除元素的位置有误&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; add; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; t.length; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t.head[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; t.head[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t.length&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 查找函数，其中，elem 表示要查找的数据元素的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectTable&lt;/span&gt;(table t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; elem) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; t.length; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (t.head[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; elem) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 更改函数，其中，elem 为要更改的元素，newElem 为新的数据元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;table &lt;span style=&#34;color:#a6e22e&#34;&gt;amendTable&lt;/span&gt;(table t, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; elem, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; newElem) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectTable&lt;/span&gt;(t, elem);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t.head[add &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newElem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; t;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 输出顺序表中元素的函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;displayTable&lt;/span&gt;(table t) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; t.length; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d &amp;#34;&lt;/span&gt;, t.head[i]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, add;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    table t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initTable&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 向顺序表中添加元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; Size; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t1.head[i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t1.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;原顺序表：&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;displayTable&lt;/span&gt;(t1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;删除元素1:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delTable&lt;/span&gt;(t1, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;displayTable&lt;/span&gt;(t1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;在第2的位置插入元素5:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addTable&lt;/span&gt;(t1, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;displayTable&lt;/span&gt;(t1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;查找元素3的位置:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectTable&lt;/span&gt;(t1, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, add);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;将元素3改为6:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    t1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;amendTable&lt;/span&gt;(t1, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;displayTable&lt;/span&gt;(t1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结果&#34;&gt;结果
&lt;/h2&gt;&lt;p&gt;程序运行结果为：&lt;/p&gt;</description>
        </item>
        <item>
        <title>数据结构 链表代码</title>
        <link>https://blog.yexca.net/archives/15/</link>
        <pubDate>Wed, 17 Nov 2021 12:00:49 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/15/</guid>
        <description>&lt;h2 id=&#34;简单链表&#34;&gt;简单链表
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; num;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;float&lt;/span&gt; score;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;next;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; student a, b, c, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;head, &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a.num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99101&lt;/span&gt;; a.score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;89.5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b.num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99103&lt;/span&gt;; b.score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99107&lt;/span&gt;; c.score &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;85&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// 对结点的 num 和 score 成员赋值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    head &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;a;  &lt;span style=&#34;color:#75715e&#34;&gt;// 将结点 a 的起始地址赋给头指针 head
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    a.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;b;  &lt;span style=&#34;color:#75715e&#34;&gt;// 将结点 b 的起始地址赋给 a 结点的 next 成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    b.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c.next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;  &lt;span style=&#34;color:#75715e&#34;&gt;// c 结点的 next 成员不存放其他结点地址
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; head;  &lt;span style=&#34;color:#75715e&#34;&gt;// 使 p 指针指向 a 结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%ld %5.1f&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;num, p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;score);  &lt;span style=&#34;color:#75715e&#34;&gt;// 输出 p 指向的结点的数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;next;  &lt;span style=&#34;color:#75715e&#34;&gt;//使 p 指向下一结点
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(p &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL);  &lt;span style=&#34;color:#75715e&#34;&gt;//输出完 c 结点后 p 的值为 NULL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;内存分配函数&#34;&gt;内存分配函数
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;malloc 函数&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; size);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;作用是在内存的动态存储区中分配一个长度为 size 的连接空间。些函数的值（即返回值）是一个指向分配空间起始地址的指针（基类型为 void）。如果些函数未能成功地执行（例如内存空间不足）则返回空指针 NULL。&lt;/p&gt;</description>
        </item>
        <item>
        <title>C 数据结构代码</title>
        <link>https://blog.yexca.net/archives/14/</link>
        <pubDate>Thu, 11 Nov 2021 23:03:27 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/14/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;该文章由 

&lt;a class=&#34;link&#34; href=&#34;https://blog.hiyoung.xyz/&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
Hiyoung
&lt;/a&gt;
  编写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//数组栈的实现
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MaxSize 50
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; Stack_Array{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; data[MaxSize];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; top;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}Sqstack,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pSqstack;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Initstack&lt;/span&gt;();  &lt;span style=&#34;color:#75715e&#34;&gt;//初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Isempty&lt;/span&gt;();     &lt;span style=&#34;color:#75715e&#34;&gt;//判断栈空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Push&lt;/span&gt;();        &lt;span style=&#34;color:#75715e&#34;&gt;//入栈
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Pop&lt;/span&gt;();         &lt;span style=&#34;color:#75715e&#34;&gt;//出栈
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gettop&lt;/span&gt;();      &lt;span style=&#34;color:#75715e&#34;&gt;//get 栈顶元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;)     &lt;span style=&#34;color:#75715e&#34;&gt;//测试
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Sqstack s1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pSqstack ps1&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;amp;&lt;/span&gt;s1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Initstack&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s1);  &lt;span style=&#34;color:#75715e&#34;&gt;//初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Isempty&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s1))  &lt;span style=&#34;color:#75715e&#34;&gt;//判断栈空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;栈为空！&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;栈不为空！&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;输入压栈元素的值&amp;#34;&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;//压栈 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;scanf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Push&lt;/span&gt; (ps1,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;输入压栈元素的值&amp;#34;&lt;/span&gt;);    &lt;span style=&#34;color:#75715e&#34;&gt;//压栈 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;scanf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Push&lt;/span&gt; (ps1,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Isempty&lt;/span&gt;(ps1))        &lt;span style=&#34;color:#75715e&#34;&gt;//判断栈空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;栈为空！&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;栈不为空！&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Gettop&lt;/span&gt;(ps1,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val))    &lt;span style=&#34;color:#75715e&#34;&gt;//GET栈顶元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;栈顶值为%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;栈顶元素查找失败！&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Pop&lt;/span&gt;(ps1,&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;val))    &lt;span style=&#34;color:#75715e&#34;&gt;//出栈
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;出栈成功，出栈元素为%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,val);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;出栈失败！&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Initstack&lt;/span&gt; (pSqstack ps1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//判断栈空
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Isempty&lt;/span&gt;(pSqstack ps1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;==-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//若栈不满，则进行压栈
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Push&lt;/span&gt;(pSqstack ps1,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;val)&lt;span style=&#34;color:#75715e&#34;&gt;//*val:接受一个地址(int *(&amp;amp;val))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;MaxSize)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data[ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top]&lt;span style=&#34;color:#f92672&#34;&gt;=*&lt;/span&gt;val;&lt;span style=&#34;color:#75715e&#34;&gt;//这里传递的是值，这里的*val是*(&amp;amp;val),&amp;amp;val是由主调函数输入
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;//也可写作ps1-&amp;gt;data[++ps1-&amp;gt;top]=*val; 一定是++ps1-&amp;gt;top
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//若栈不空，则进行出栈，用val返回栈顶元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Pop&lt;/span&gt;(pSqstack ps1,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Isempty&lt;/span&gt;(ps1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data[ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//get栈顶元素，用val返回栈顶元素
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Gettop&lt;/span&gt;(pSqstack ps1,&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;val)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Isempty&lt;/span&gt;(ps1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;val&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;data[ps1&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;top];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;图解简化&lt;/p&gt;</description>
        </item>
        <item>
        <title>SQL 语句的一些语法细节 (SQL SERVER 语句)</title>
        <link>https://blog.yexca.net/archives/8/</link>
        <pubDate>Mon, 08 Nov 2021 11:51:18 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/8/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;该文章由 

&lt;a class=&#34;link&#34; href=&#34;https://blog.hiyoung.xyz/&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
Hiyoung
&lt;/a&gt;
  编写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1sql-order-by-关键字&#34;&gt;1.SQL ORDER BY 关键字
&lt;/h2&gt;&lt;p&gt;ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。&lt;/p&gt;
&lt;p&gt;ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字&lt;/p&gt;</description>
        </item>
        <item>
        <title>关于在使用 navicat 连接 SQL server 的一些问题</title>
        <link>https://blog.yexca.net/archives/7/</link>
        <pubDate>Sun, 07 Nov 2021 23:41:46 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/7/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;该文章由 

&lt;a class=&#34;link&#34; href=&#34;https://blog.hiyoung.xyz/&#34; 


   target=&#34;_blank&#34; rel=&#34;noopener&#34;
&gt;
Hiyoung
&lt;/a&gt;
  编写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在安装完 SQL server 和 navicat 后在 navicat 中添加数据库：&lt;/p&gt;
&lt;p&gt;1.连接名无要求，按照自己需要命名&lt;/p&gt;
&lt;p&gt;2.打开安装好的 SQL server 配置管理器&lt;/p&gt;
&lt;p&gt;注意 SQL Server（SQLEXPRESS）要保证在运行中，否则 navicat 无法连接&lt;br&gt;
双击打开后点击服务，可以看到自己的主机名&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
