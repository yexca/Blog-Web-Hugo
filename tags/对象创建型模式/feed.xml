<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>对象创建型模式 on yexca'Blog</title><link>https://blog.yexca.net/tags/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link><description>Recent content in 对象创建型模式 on yexca'Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>yexca</copyright><lastBuildDate>Wed, 05 Jul 2023 13:58:25 +0800</lastBuildDate><atom:link href="https://blog.yexca.net/tags/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/feed.xml" rel="self" type="application/rss+xml"/><item><title>单例模式</title><link>https://blog.yexca.net/archives/115/</link><pubDate>Wed, 05 Jul 2023 13:58:25 +0800</pubDate><guid>https://blog.yexca.net/archives/115/</guid><description>&lt;p>Singleton Pattern 对象创建型模式&lt;/p>
&lt;h2 id="意图">意图
&lt;/h2>&lt;p>保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p>
&lt;h2 id="结构">结构
&lt;/h2>&lt;p>&lt;img src="https://cdn.statically.io/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f.47bqfvzklxk0.webp"
loading="lazy"
>&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>Singleton 指定一个 Instance 操作，允许客户访问它的唯一实例&lt;/li>
&lt;li>Instance 是一个类操作；可能负责创建它自己的唯一实例&lt;/li>
&lt;/ul>
&lt;h2 id="适用性">适用性
&lt;/h2>&lt;p>Singleton 模式适用于：&lt;/p></description></item><item><title>原型模式</title><link>https://blog.yexca.net/archives/113/</link><pubDate>Fri, 02 Jun 2023 19:31:44 +0800</pubDate><guid>https://blog.yexca.net/archives/113/</guid><description>&lt;p>Prototype Pattern 对象创建型模式&lt;/p>
&lt;h2 id="意图">意图
&lt;/h2>&lt;p>用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象&lt;/p>
&lt;h2 id="结构">结构
&lt;/h2>&lt;p>&lt;img src="https://cdn.statically.io/gh/yexca/image_hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e5%8e%9f%e5%9e%8b%e6%a8%a1%e5%bc%8f.550t72mfloo0.webp"
loading="lazy"
>&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>Prototype 声明一个复制自身的接口&lt;/li>
&lt;li>ConcretePrototype 实现一个复制自身的操作&lt;/li>
&lt;li>Client 让一个原型复制自身从而创建一个新的对象&lt;/li>
&lt;/ul>
&lt;h2 id="适用性">适用性
&lt;/h2>&lt;p>Prototype 模式适用于：&lt;/p></description></item><item><title>生成器模式</title><link>https://blog.yexca.net/archives/112/</link><pubDate>Thu, 01 Jun 2023 23:33:17 +0800</pubDate><guid>https://blog.yexca.net/archives/112/</guid><description>&lt;p>Builder Pattern 对象创建型模式&lt;/p>
&lt;h2 id="意图">意图
&lt;/h2>&lt;p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示&lt;/p>
&lt;h2 id="结构">结构
&lt;/h2>&lt;p>&lt;img src="https://cdn.statically.io/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e7%94%9f%e6%88%90%e5%99%a8%e6%a8%a1%e5%bc%8f.52btnuzz5780.webp"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>其中：&lt;/p>
&lt;ul>
&lt;li>Builder 为创建一个 Product 对象的各个部件指定抽象接口&lt;/li>
&lt;li>ConcreteBuilder 实现 Builder 的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，提供一个检索产品的接口&lt;/li>
&lt;li>Director 构造一个使用 Builder 接口的对象&lt;/li>
&lt;li>Product 表示被构建的复杂对象。ConcreteBuilder 创建该产品的内部表示并定义它的装配过程。包含定义组成组件的类，包括将这些组件装配成最终产品的接口&lt;/li>
&lt;/ul>
&lt;h2 id="适用性">适用性
&lt;/h2>&lt;p>Builder 模式适用于：&lt;/p></description></item><item><title>工厂模式</title><link>https://blog.yexca.net/archives/111/</link><pubDate>Sun, 28 May 2023 10:23:46 +0800</pubDate><guid>https://blog.yexca.net/archives/111/</guid><description>&lt;h2 id="简单工厂模式">简单工厂模式
&lt;/h2>&lt;p>简单工厂模式属于创建型模式，但&lt;strong>不属于&lt;/strong> 23 种设计模式之一&lt;/p>
&lt;p>定义：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类&lt;/p></description></item></channel></rss>