<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>对象行为型模式 on yexca&#39;Blog</title>
        <link>https://blog.yexca.net/tags/%E5%AF%B9%E8%B1%A1%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
        <description>Recent content in 对象行为型模式 on yexca&#39;Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>yexca</copyright>
        <lastBuildDate>Tue, 26 Dec 2023 16:09:09 +0800</lastBuildDate><atom:link href="https://blog.yexca.net/tags/%E5%AF%B9%E8%B1%A1%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>访问者模式</title>
        <link>https://blog.yexca.net/archives/139/</link>
        <pubDate>Tue, 26 Dec 2023 16:09:09 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/139/</guid>
        <description>&lt;p&gt;Visitor Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;表示一个作用于某对象结构中的各元素的操作。它不允许在不改变各元素的类的前提下定义作用于这些元素的新操作&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e8%ae%bf%e9%97%ae%e8%80%85%e6%a8%a1%e5%bc%8f.5psqrqdq7gs0.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;访问者模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visitor (访问者) 为该对象结构中 ConcreteElement 的每一个类声明一个 Visit 操作。该操作的名字和特殊标识了发送 Visit 请求给该访问者的那个类，这使得访问者可以确定正被访问元素的具体的类。这样访问者就可以通过该元素的特定接口直接访问它&lt;/li&gt;
&lt;li&gt;ConcreteVisitor (具体访问者) 实现每个有 Visitor 声明的操作，每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。ConcreteVisitor 为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累积结构&lt;/li&gt;
&lt;li&gt;Element (元素) 定义以一个访问者为参数的 Accept 操作&lt;/li&gt;
&lt;li&gt;ConcreteElement (具体元素) 实现以一个访问者为参数的 Accept 操作&lt;/li&gt;
&lt;li&gt;ObjectStructure (对象结构) 能枚举它的元素；可以提供一个高层的接口以允许该访问者访问它的元素；可以是一个组合或者一个集合，如一个列表或一个无序集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用性&#34;&gt;适用性
&lt;/h2&gt;&lt;p&gt;Visitor 模式适用于：&lt;/p&gt;</description>
        </item>
        <item>
        <title>策略模式</title>
        <link>https://blog.yexca.net/archives/137/</link>
        <pubDate>Sun, 24 Dec 2023 18:30:30 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/137/</guid>
        <description>&lt;p&gt;Strategy Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。此模式使得算法可以独立于使用它们的客户而变化&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e7%ad%96%e7%95%a5%e6%a8%a1%e5%bc%8f.71vxrbauk9s0.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;策略模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Strategy (策略) 定义所有支持的算法的公共接口。Context 使用这个接口来调用某 ConcreteStrategy 定义的算法&lt;/p&gt;</description>
        </item>
        <item>
        <title>状态模式</title>
        <link>https://blog.yexca.net/archives/136/</link>
        <pubDate>Fri, 22 Dec 2023 15:11:16 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/136/</guid>
        <description>&lt;p&gt;State Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e7%8a%b6%e6%80%81%e6%a8%a1%e5%bc%8f.775ry4zlh4g0.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;状态模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Context (上下文) 定义客户感兴趣的接口：维护一个 ConcerteState 子类的实例，这个实例定义当前状态&lt;/p&gt;</description>
        </item>
        <item>
        <title>观察者模式</title>
        <link>https://blog.yexca.net/archives/134/</link>
        <pubDate>Thu, 21 Dec 2023 01:18:25 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/134/</guid>
        <description>&lt;h1 id=&#34;观察者模式&#34;&gt;观察者模式
&lt;/h1&gt;&lt;p&gt;Observer Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变吋，所有依赖于它的对象都得到通知并被自动更新&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e8%a7%82%e5%af%9f%e8%80%85%e6%a8%a1%e5%bc%8f.5x607bf0xvw0.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;观察者模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Subject (目标) 知道它的观察者，可以有任意多个观察者观察同一个目标；提供注册和删除观察者对象的接口&lt;/li&gt;
&lt;li&gt;Observer (观察者) 为那些在&amp;quot;目标发生改变时需获得通知的对象定义一个更新接口&lt;/li&gt;
&lt;li&gt;ConcreteSubject (具体目标) 将有关状态存入各 ConcreteObserver 对象：当它的状态发生改变时，向它的各个观察者发出通知&lt;/li&gt;
&lt;li&gt;ConcreteObserver (具体观察者) 维护一个指向 ConcreteSubject 对象的引用：存储有关状态，这些状态应与目标的状态保持一致：实现 Observer 的更新接口，以使自身状态与目标的状态保持一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用性&#34;&gt;适用性
&lt;/h2&gt;&lt;p&gt;Observer 模式适用于：&lt;/p&gt;</description>
        </item>
        <item>
        <title>备忘录模式</title>
        <link>https://blog.yexca.net/archives/132/</link>
        <pubDate>Mon, 27 Nov 2023 14:08:05 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/132/</guid>
        <description>&lt;p&gt;Memento Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;在不破坏封装性的前提下捕获一个对象的内部状态，并在对象之外保存这个状态。这样以后就可以将对象恢复到原先保存的状态&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e5%a4%87%e5%bf%98%e5%bd%95%e6%a8%a1%e5%bc%8f.5pa8d63vllc0.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;备忘录模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Memento (备忘录) 存储原发器对象的内部状态，原发器根据需要决定备忘录存储原发器的哪些内部状态；防止原发器以外的其他对象访问备忘录&lt;/li&gt;
&lt;li&gt;Originator (原发器) 创建一个备忘录，用于记录当前时刻它的内部状态；使用备忘录恢复内部状态&lt;/li&gt;
&lt;li&gt;Caretaker (管理者) 负责保存好备忘录；不能对备忘录的内容进行操作或检查&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用性&#34;&gt;适用性
&lt;/h2&gt;&lt;p&gt;Memento 模式适用于：&lt;/p&gt;</description>
        </item>
        <item>
        <title>中介者模式</title>
        <link>https://blog.yexca.net/archives/128/</link>
        <pubDate>Sun, 15 Oct 2023 17:14:26 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/128/</guid>
        <description>&lt;p&gt;Mediator Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间地交互&lt;/p&gt;</description>
        </item>
        <item>
        <title>迭代器模式</title>
        <link>https://blog.yexca.net/archives/127/</link>
        <pubDate>Thu, 12 Oct 2023 09:09:24 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/127/</guid>
        <description>&lt;p&gt;Iterator Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;提供一种方法顺序访问一个聚合对象中的各个元素，且不需要暴露该对象的内部表示&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e8%bf%ad%e4%bb%a3%e5%99%a8%e6%a8%a1%e5%bc%8f.3qxn134hel60.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;迭代器模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterator (迭代器) 定义访问和遍历元素的接口&lt;/li&gt;
&lt;li&gt;ConcreteIterator (具体迭代器) 实现迭代器接口；对该聚合遍历时跟踪当前位置&lt;/li&gt;
&lt;li&gt;Aggregate (聚合) 定义创建相应迭代器对象的接口&lt;/li&gt;
&lt;li&gt;ConcreteAggregate (具体聚合) 实现创建相应迭代器的接口，该操作返回 ConcreteIterator 的一个适当的实例&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用性&#34;&gt;适用性
&lt;/h2&gt;&lt;p&gt;Iterator 模式适用于：&lt;/p&gt;</description>
        </item>
        <item>
        <title>命令模式</title>
        <link>https://blog.yexca.net/archives/125/</link>
        <pubDate>Sun, 10 Sep 2023 15:26:55 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/125/</guid>
        <description>&lt;p&gt;Command Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/yexca/picx-images-hosting@master/2023/03-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f/%e5%91%bd%e4%bb%a4%e6%a8%a1%e5%bc%8f.5urjyaqm2mo0.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;命令模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command 声明执行操作的接口&lt;/li&gt;
&lt;li&gt;ConcreteCommand 将一个接收者对象绑定于一个动作；调用接收者相应的操作，以实现 Execute&lt;/li&gt;
&lt;li&gt;Client 创建一个具体命令对象并设定它的接收者&lt;/li&gt;
&lt;li&gt;Invoker 要求该命令执行这个请求&lt;/li&gt;
&lt;li&gt;Receiver 知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用性&#34;&gt;适用性
&lt;/h2&gt;&lt;p&gt;Command 模式适用于：&lt;/p&gt;</description>
        </item>
        <item>
        <title>责任链模式</title>
        <link>https://blog.yexca.net/archives/124/</link>
        <pubDate>Sat, 09 Sep 2023 07:02:55 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/124/</guid>
        <description>&lt;p&gt;Chain of Responsibility Pattern 对象行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
