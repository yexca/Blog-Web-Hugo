<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>类行为型模式 on yexca&#39;Blog</title>
        <link>https://blog.yexca.net/tags/%E7%B1%BB%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
        <description>Recent content in 类行为型模式 on yexca&#39;Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>yexca</copyright>
        <lastBuildDate>Mon, 25 Dec 2023 21:06:06 +0800</lastBuildDate><atom:link href="https://blog.yexca.net/tags/%E7%B1%BB%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/feed.xml" rel="self" type="application/rss+xml" /><item>
        <title>模板方法模式</title>
        <link>https://blog.yexca.net/archives/138/</link>
        <pubDate>Mon, 25 Dec 2023 21:06:06 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/138/</guid>
        <description>&lt;p&gt;Template Method Pattern 类行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;定义一个操作中的算法骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤&lt;/p&gt;</description>
        </item>
        <item>
        <title>解释器模式</title>
        <link>https://blog.yexca.net/archives/126/</link>
        <pubDate>Mon, 09 Oct 2023 17:31:58 +0800</pubDate>
        
        <guid>https://blog.yexca.net/archives/126/</guid>
        <description>&lt;p&gt;Interpreter Pattern 类行为型模式&lt;/p&gt;
&lt;h2 id=&#34;意图&#34;&gt;意图
&lt;/h2&gt;&lt;p&gt;给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子&lt;/p&gt;
&lt;h2 id=&#34;结构&#34;&gt;结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.statically.io/gh/yexca/picx-images-hosting@master/2021/%e8%a7%a3%e9%87%8a%e5%99%a8%e6%a8%a1%e5%bc%8f.67y5fd2xby40.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;解释器模式&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AbstractExpression 声明一个程序的解释操作，这个接口为抽象语法树中所有的结点所共享&lt;/li&gt;
&lt;li&gt;TerminalExpression 实现与文法中的终结符相关联的解释操作；一个句子中的每个终结符需要该类的一个实例&lt;/li&gt;
&lt;li&gt;NonterminalExpression 对文法中的每一条规则都需要一个 NonterminalExpression 类；为每个符号都维护一个 AbstractExpression 类型的实例变量；为文法中的非终结符实现解释 (Interpret) 操作&lt;/li&gt;
&lt;li&gt;Context 包含解释器之外的一些全局信息&lt;/li&gt;
&lt;li&gt;Client 构建 (或被给定) 表示该文法定义的语言中一个特定的句子的抽象语法树，该抽象语法树由 NonterminalExpression 和 TerminalExpression 的实例装配而成；调用解释操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;适用性&#34;&gt;适用性
&lt;/h2&gt;&lt;p&gt;Interpreter 模式适用于当有一个语言需要解释执行，并且可将该语言中的句子表示为一个抽象语法树时，以下情况效果最好：&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
